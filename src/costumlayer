//=============================================================================================================================================class pou les panel 
public class NewClass extends JPanel {

    private int cornerRadius;
    private Color baseColor = new Color(0, 0, 0); // noir par défaut

    public NewClass() {
        this.cornerRadius = 50;
        setOpaque(false);
    }

    // Permet de changer la couleur de base (ex: violet, bleu...)
    public void setBaseColor(Color baseColor) {
        this.baseColor = baseColor;
        repaint(); // Redessine le composant
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        Graphics2D g2 = (Graphics2D) g.create();
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        // Dégradé basé sur la couleur choisie, du semi-transparent au transparent
        GradientPaint gradient = new GradientPaint(
            0, 0, new Color(baseColor.getRed(), baseColor.getGreen(), baseColor.getBlue(), 60),
            getWidth(), 100, new Color(baseColor.getRed(), baseColor.getGreen(), baseColor.getBlue(), 250)
        );

        g2.setPaint(gradient);
        g2.fillRoundRect(0, 0, getWidth(), getHeight(), cornerRadius, cornerRadius);

        g2.dispose();
    }

    
    
    
}



//============================================================================================================================classe des panel avec image 
import java.awt.Graphics;
import java.awt.Image;
import javax.swing.ImageIcon;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */

/**
 *
 * @author manel
 */


public class CostumPanel extends NewClass {

    private Image backgroundImage;     // L’image à afficher
    private int imgX = 0;              // Position X de l’image
    private int imgY = 0;              // Position Y de l’image
    private int imgWidth = -1;         // Largeur personnalisée (-1 = taille d'origine)
    private int imgHeight = -1;        // Hauteur personnalisée
    private boolean resizeToFit = false; // Redimensionner l’image à la taille du panel

    // Constructeur : charge l’image à partir du chemin donné
    public CostumPanel (String imagePath) {
        try {
            backgroundImage = new ImageIcon(imagePath).getImage();
        } catch (Exception e) {
            System.out.println("Erreur chargement image : " + e.getMessage());
        }
    }

    // Définit la position personnalisée de l’image dans le panel
    public void setImagePosition(int x, int y) {
        this.imgX = x;
        this.imgY = y;
        repaint(); // Redessine le panel
    }

    // Définit une taille personnalisée pour l’image
    public void setImageSize(int width, int height) {
        this.imgWidth = width;
        this.imgHeight = height;
        this.resizeToFit = false; // Priorité à la taille définie
        repaint();
    }

    // Active ou désactive le redimensionnement automatique à la taille du panel
    public void setResizeToFitPanel(boolean resize) {
        this.resizeToFit = resize;
        repaint();
    }

    // Méthode de dessin du composant
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        if (backgroundImage != null) {
            if (resizeToFit) {
                // Redimensionne l’image à toute la taille du panel
                g.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), this);
            } else if (imgWidth > 0 && imgHeight > 0) {
                // Dessine avec taille et position personnalisées
                g.drawImage(backgroundImage, imgX, imgY, imgWidth, imgHeight, this);
            } else {
                // Affiche l’image à sa taille originale à la position donnée
                g.drawImage(backgroundImage, imgX, imgY, this);
            }
        }
    }
}

//=========================================================================================================================================classe des boutton 
import javax.swing.*;
import java.awt.*;

import java.awt.event.*;

// Classe personnalisée pour un bouton avec bordures arrondies et blanches
public class CustomButtonExample extends JButton {

    private int cornerRadius = 20;      // Rayon par défaut des coins arrondis
    private int borderThickness = 3;    // Épaisseur par défaut de la bordure
    private Dimension customSize;       // Taille personnalisée du bouton
    private BorderStyle borderStyle = BorderStyle.ROUNDED; // Style de bordure par défaut
    private Color backgroundColor = new Color(0, 0, 0, 30); // Couleur de fond par défaut (transparente légère)
   

    // Constructeur sans icône
    public CustomButtonExample() {
        setContentAreaFilled(false);  // Pas de remplissage par Swing
        setBorderPainted(false);      // Pas de bordure standard
        setFocusPainted(false);       // Pas d'effet de focus Swing
        setOpaque(false);             // Pour permettre la transparence

        setText(null); // Aucun texte à l'intérieur du bouton par défaut
    }
    // Ajouter du texte dans le bouton
    public void setButtonText(String text) {
        setText(text);  // Définit le texte du bouton
        repaint();      // Redessine le bouton pour afficher le texte
    }

    // Permet de définir une taille personnalisée pour le bouton
    public void setButtonSize(int width, int height) {
        this.customSize = new Dimension(width, height);
        revalidate(); // Redemander à Swing de recalculer la taille
        repaint();    // Redessiner
    }
    //ajousée l image 
    public void setButtonImage(ImageIcon originalIcon) {
    if (originalIcon != null) {
        this.addComponentListener(new java.awt.event.ComponentAdapter() {
            @Override
            public void componentResized(java.awt.event.ComponentEvent e) {
                Image resizedImage = originalIcon.getImage().getScaledInstance(
                    getWidth(), getHeight(), Image.SCALE_SMOOTH);
                setIcon(new ImageIcon(resizedImage));
            }
        });
    }
}


    // Permet de changer l'épaisseur de la bordure blanche
    public void setBorderThickness(int thickness) {
        this.borderThickness = thickness;
        repaint();
    }

    // Permet de changer le style de la bordure (arrondie ou carrée)
    public void setBorderStyle(BorderStyle style) {
        this.borderStyle = style;
        repaint();
    }

    // Permet de changer dynamiquement le rayon des coins arrondis
    public void setCornerRadius(int radius) {
        this.cornerRadius = radius;
        repaint();
    }

    // Retourne la taille préférée du bouton
    @Override
    public Dimension getPreferredSize() {
        if (customSize != null) {
            return customSize;
        }
        return super.getPreferredSize();
    }
    
    // Permet de changer la couleur du fond
    public void setBackgroudColor(Color color) {
        this.backgroundColor = color;
        repaint();
    }
   
  
    // Dessin du bouton personnalisé
    @Override
    protected void paintComponent(Graphics g) {
        Graphics2D g2 = (Graphics2D) g.create();
       
        // Meilleur rendu pour les formes arrondies
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        // Dessine le fond avec la couleur personnalisée
        g2.setColor(backgroundColor);  // Utilise la couleur de fond

        // Dessine le fond selon le style
        if (borderStyle == BorderStyle.ROUNDED) {
            g2.fillRoundRect(0, 0, getWidth(), getHeight(), cornerRadius, cornerRadius);
        } else if (borderStyle == BorderStyle.SQUARE) {
            g2.fillRect(0, 0, getWidth(), getHeight());
        }

        // Dessine la bordure blanche
        g2.setColor(Color.WHITE);
        g2.setStroke(new BasicStroke(borderThickness));

        if (borderStyle == BorderStyle.ROUNDED) {
            g2.drawRoundRect(0, 0, getWidth() - 1, getHeight() - 1, cornerRadius, cornerRadius);
        } else if (borderStyle == BorderStyle.SQUARE) {
            g2.drawRect(0, 0, getWidth() - 1, getHeight() - 1);
        }

        g2.dispose(); // Libérer les ressources

        super.paintComponent(g); // Appelle la peinture normale (par exemple pour l'icône ou autre)
        
        // Affiche le texte au centre du bouton
        String text = getText();
        if (text != null) {
            g2.setColor(Color.WHITE);  // Choisis la couleur de texte
            g2.setFont(new Font("Arial", Font.BOLD, 16));  // Police et taille du texte
            FontMetrics metrics = g2.getFontMetrics();
            int x = (getWidth() - metrics.stringWidth(text)) / 2; // Position X
            int y = (getHeight() - metrics.getHeight()) / 2 + metrics.getAscent(); // Position Y
            g2.drawString(text, x, y);
        }
    }
}

// Enumération pour choisir entre deux styles de bordure
enum BorderStyle {
    ROUNDED,  // Coins arrondis
    SQUARE    // Coins carrés
}

//=========================================================================================================================class pour les dialoges
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class CustomDialog extends JDialog {
    
    private NewClass titleBar;
    private JPanel contentPanel;
    private Point initialClick;
    private boolean isResizing = false;
    
    public CustomDialog(Frame owner, boolean modal) {
        super(owner, modal);
        
        // Supprimer la décoration standard de la boîte de dialogue
        setUndecorated(true);
        
        // Créer un layout principal
        setLayout(new BorderLayout());
        
        // Initialiser la barre de titre personnalisée (utilisant NewClass)
        //titleBar = new NewClass();
        //titleBar.setPreferredSize(new Dimension(getWidth(), 40)); // Hauteur de 40px pour la barre de titre
        
        
        
        // Ajouter la fonctionnalité de déplacement de la boîte de dialogue
        addMoveWindowListener();
        
        // Créer un panel pour le contenu
        contentPanel = new JPanel();
        contentPanel.setBackground(Color.WHITE);
        contentPanel.setLayout(new BorderLayout());
        
        // Ajouter un texte d'exemple dans le panel de contenu
        JLabel exampleLabel = new JLabel("Contenu de la boîte de dialogue", SwingConstants.CENTER);
        exampleLabel.setFont(new Font("Arial", Font.PLAIN, 18));
        contentPanel.add(exampleLabel, BorderLayout.CENTER);
        
        // Ajouter une bordure pour l'effet visuel
        getRootPane().setBorder(BorderFactory.createLineBorder(new Color(100, 181, 246), 2));
        
        // Ajouter les composants à la dialog
        add(titleBar, BorderLayout.NORTH);
        add(contentPanel, BorderLayout.CENTER);
        
        // Ajouter des écouteurs pour le redimensionnement
        addResizeListener();
        
        // Configurer la taille et la position de la boîte de dialogue
        setSize(400, 300);
        setLocationRelativeTo(owner);
        setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
    }
    
    private void addControlButtons() {
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 5, 5));
        buttonPanel.setOpaque(false);
        
        // Bouton Fermer
        JButton closeBtn = createButton("×", new Color(135, 206, 235));
        closeBtn.addActionListener(e -> dispose());
        
        buttonPanel.add(closeBtn);
        
        titleBar.add(buttonPanel);
    }
    
    private JButton createButton(String text, Color bgColor) {
        JButton button = new JButton(text);
        button.setFocusPainted(false);
        button.setBorderPainted(false);
        button.setContentAreaFilled(false);
        button.setFont(new Font("Arial", Font.BOLD, 16));
        button.setForeground(Color.WHITE);
        button.setPreferredSize(new Dimension(30, 25));
        
        // Hover effect
        button.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                if (text.equals("×")) {
                    button.setForeground(Color.RED);
                } else {
                    button.setForeground(Color.LIGHT_GRAY);
                }
            }
            
            @Override
            public void mouseExited(MouseEvent e) {
                button.setForeground(Color.WHITE);
            }
        });
        
        return button;
    }
    
    private void addMoveWindowListener() {
        titleBar.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                initialClick = e.getPoint();
                getComponentAt(initialClick);
            }
        });
        
        titleBar.addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseDragged(MouseEvent e) {
                // Récupérer la position actuelle de la souris
                int thisX = getLocation().x;
                int thisY = getLocation().y;
                
                // Déterminer le déplacement
                int xMoved = e.getX() - initialClick.x;
                int yMoved = e.getY() - initialClick.y;
                
                // Déplacer la boîte de dialogue
                int X = thisX + xMoved;
                int Y = thisY + yMoved;
                setLocation(X, Y);
            }
        });
    }
    
    private void addResizeListener() {
        // Définir une zone de bord où le redimensionnement est activé
        int border = 5;
        
        addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                isResizing = true;
                initialClick = e.getPoint();
            }
            
            @Override
            public void mouseReleased(MouseEvent e) {
                isResizing = false;
            }
        });
        
        addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                int x = e.getX();
                int y = e.getY();
                int width = getWidth();
                int height = getHeight();
                
                // Définir le curseur selon la position
                if (x >= width - border && y >= height - border) {
                    setCursor(Cursor.getPredefinedCursor(Cursor.SE_RESIZE_CURSOR));
                } else if (x >= width - border) {
                    setCursor(Cursor.getPredefinedCursor(Cursor.E_RESIZE_CURSOR));
                } else if (y >= height - border) {
                    setCursor(Cursor.getPredefinedCursor(Cursor.S_RESIZE_CURSOR));
                } else {
                    setCursor(Cursor.getDefaultCursor());
                }
            }
            
            @Override
            public void mouseDragged(MouseEvent e) {
                if (isResizing && getCursor() != Cursor.getDefaultCursor()) {
                    int newWidth = getWidth();
                    int newHeight = getHeight();
                    
                    if (getCursor() == Cursor.getPredefinedCursor(Cursor.E_RESIZE_CURSOR)) {
                        newWidth = e.getX();
                    } else if (getCursor() == Cursor.getPredefinedCursor(Cursor.S_RESIZE_CURSOR)) {
                        newHeight = e.getY();
                    } else if (getCursor() == Cursor.getPredefinedCursor(Cursor.SE_RESIZE_CURSOR)) {
                        newWidth = e.getX();
                        newHeight = e.getY();
                    }
                    
                    if (newWidth >= 200 && newHeight >= 150) {
                        setSize(newWidth, newHeight);
                        validate();
                        repaint();
                    }
                }
            }
        });
    }
    
   
}
//================================================================================================================================ class poure les frames 


import javax.swing.*;
import java.awt.*;
import javax.swing.border.LineBorder;

public class CustomFrame extends JFrame {
    private JPanel contentArea; // Zone centrale modifiable
    private JPanel topBar; // Barre de titre personnalisée
    private Point initialClick; // Pour le déplacement de la fenêtre sans bordures
    
    /**
     * Constructeur personnalisé permettant de définir le titre et la taille
     * @param title Le titre de la fenêtre
     * @param width La largeur de la fenêtre
     * @param height La hauteur de la fenêtre
     */
    public CustomFrame(String title, int width, int height) {
        // Supprimer la décoration de la fenêtre (barre de titre standard)
        setUndecorated(true);
        
        // Ajouter une bordure fine à la fenêtre pour la délimiter
        getRootPane().setBorder(new LineBorder(new Color(70, 130, 180), 1));
        
        // Définir les propriétés personnalisées
        setTitle(title); // Le titre est toujours utile même s'il n'est pas affiché
        setSize(width, height);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());
        
        // === Barre de titre personnalisée ===
        topBar = new JPanel(new BorderLayout());
        topBar.setBackground(new Color(135, 206, 235)); // Bleu ciel
        
        // Panel pour l'icône et le texte (à gauche)
        JPanel leftTopBarPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        leftTopBarPanel.setOpaque(false);
        
        try {
            ImageIcon originalIcon = new ImageIcon("C:\\Users\\manel\\OneDrive\\Images\\Screenshots\\logo.png");
            Image image = originalIcon.getImage().getScaledInstance(24, 24, Image.SCALE_SMOOTH);
            JLabel iconLabel = new JLabel(new ImageIcon(image));
            leftTopBarPanel.add(iconLabel);
            
            JLabel textLabel = new JLabel("مرحب");
            textLabel.setForeground(Color.WHITE);
            textLabel.setFont(new Font("Arial", Font.BOLD, 14));
            leftTopBarPanel.add(textLabel);
        } catch (Exception e) {
            System.out.println("Erreur icône: " + e.getMessage());
        }
        
        // Panel pour les boutons de contrôle (à droite)
        JPanel rightTopBarPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        rightTopBarPanel.setOpaque(false);
        
        JButton minimizeButton = new JButton("_");
        minimizeButton.setForeground(Color.WHITE);
        minimizeButton.setFont(new Font("Arial", Font.BOLD, 14));
        minimizeButton.setBorderPainted(false);
        minimizeButton.setContentAreaFilled(false);
        minimizeButton.setFocusPainted(false);
        minimizeButton.addActionListener(e -> setState(JFrame.ICONIFIED));
        
        JButton closeButton = new JButton("×");
        closeButton.setForeground(Color.WHITE);
        closeButton.setFont(new Font("Arial", Font.BOLD, 16));
        closeButton.setBorderPainted(false);
        closeButton.setContentAreaFilled(false);
        closeButton.setFocusPainted(false);
        closeButton.addActionListener(e -> System.exit(0));
        
        rightTopBarPanel.add(minimizeButton);
        rightTopBarPanel.add(closeButton);
        
        // Ajout des panels à la barre de titre
        topBar.add(leftTopBarPanel, BorderLayout.WEST);
        topBar.add(rightTopBarPanel, BorderLayout.EAST);
        
        // Ajouter la fonctionnalité de déplacement à la barre de titre
        topBar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                initialClick = evt.getPoint();
            }
        });
        
        topBar.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                // Calcul de la nouvelle position
                int thisX = getLocation().x;
                int thisY = getLocation().y;
                
                // Déterminer la distance déplacée
                int xMoved = evt.getX() - initialClick.x;
                int yMoved = evt.getY() - initialClick.y;
                
                // Déplacer la fenêtre
                int X = thisX + xMoved;
                int Y = thisY + yMoved;
                setLocation(X, Y);
            }
        });
        
        // Panel central vide pour l'instant
        contentArea = new JPanel(new BorderLayout());
        contentArea.setOpaque(false); // on laisse gérer la transparence au contenu
        
        // Ajout dans la frame
        add(topBar, BorderLayout.NORTH);
        add(contentArea, BorderLayout.CENTER);
        
        // Centrer la fenêtre sur l'écran
        setLocationRelativeTo(null);
    }
    
    /**
     * Constructeur par défaut qui utilise des valeurs prédéfinies
     */
    public CustomFrame() {
        this("Custom Frame", 800, 800); // Appel au constructeur personnalisé avec valeurs par défaut
    }
    
    /**
     * Méthode pour définir la zone de contenu
     * Attention: cette méthode stocke seulement la référence sans actualiser l'affichage
     */
    public void setContentArea(JPanel contentArea) {
        this.contentArea = contentArea;
    }
    
    /**
     * Méthode pour insérer un panneau personnalisé au centre
     * @param panel Le panneau à afficher dans la zone centrale
     */
    public void setContentPanel(JPanel panel) {
        contentArea.removeAll(); // Vide l'ancien contenu s'il y en a
        contentArea.add(panel, BorderLayout.CENTER);
        contentArea.revalidate();
        contentArea.repaint();
    }
}
