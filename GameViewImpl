package unoGamepackage;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

/**
 * Swing implementation of the GameView interface
 */
public class GameViewImpl extends JFrame implements GameView {
    private final GameController controller;
    
    // UI Components
    private JPanel mainPanel;
    private JPanel playersPanel;
    private JPanel gameInfoPanel;
    private JPanel currentPlayerPanel;
    private JPanel topCardPanel;
    private JPanel actionsPanel;
    private JPanel statusPanel;
    
    // Player and game state components
    private JLabel[] playerLabels;
    private JLabel currentPlayerLabel;
    private JLabel topCardLabel;
    private JLabel directionLabel;
    private JLabel statusLabel;
    
    // Buttons
    private JButton drawCardButton;
    private JButton[] colorButtons;
    
    /**
     * Constructor that initializes the UI and controller
     */
    public GameViewImpl() {
        // Initialize controller
        controller = new GameController(this);
        
        // Set up the frame
        setTitle("UNO Game");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(800, 600);
        
        // Initialize UI components
        initComponents();
        
        // Start a new game
        showGameSetupDialog();
    }
    
    /**
     * Initialize UI components
     */
    private void initComponents() {
        // Main panel with BorderLayout
        mainPanel = new JPanel(new BorderLayout());
        
        // Create panels
        playersPanel = new JPanel(new GridLayout(4, 1));
        gameInfoPanel = new JPanel(new GridLayout(2, 1));
        currentPlayerPanel = new JPanel(new FlowLayout());
        topCardPanel = new JPanel(new FlowLayout());
        actionsPanel = new JPanel(new FlowLayout());
        statusPanel = new JPanel(new FlowLayout());
        
        // Create labels
        currentPlayerLabel = new JLabel("Current Player: ");
        topCardLabel = new JLabel("Top Card: ");
        directionLabel = new JLabel("Direction: Clockwise");
        statusLabel = new JLabel("Game Status: In Progress");
        
        // Create buttons
        drawCardButton = new JButton("Draw Card");
        drawCardButton.addActionListener(e -> controller.drawCard());
        
        // Create color selection buttons
        colorButtons = new JButton[4];
        Color[] colors = {Color.RED, Color.BLUE, Color.GREEN, Color.YELLOW};
        String[] colorNames = {"Red", "Blue", "Green", "Yellow"};
        
        for (int i = 0; i < 4; i++) {
            final int index = i;
            colorButtons[i] = new JButton(colorNames[i]);
            colorButtons[i].addActionListener(e -> controller.selectColor(colors[index]));
            colorButtons[i].setVisible(false); // Initially hidden
        }
        
        // Add components to panels
        currentPlayerPanel.add(currentPlayerLabel);
        topCardPanel.add(topCardLabel);
        
        gameInfoPanel.add(currentPlayerPanel);
        gameInfoPanel.add(topCardPanel);
        
        actionsPanel.add(drawCardButton);
        for (JButton button : colorButtons) {
            actionsPanel.add(button);
        }
        
        statusPanel.add(directionLabel);
        statusPanel.add(statusLabel);
        
        // Add panels to main panel
        mainPanel.add(playersPanel, BorderLayout.WEST);
        mainPanel.add(gameInfoPanel, BorderLayout.CENTER);
        mainPanel.add(actionsPanel, BorderLayout.SOUTH);
        mainPanel.add(statusPanel, BorderLayout.NORTH);
        
        // Add main panel to frame
        add(mainPanel);
    }
    
    /**
     * Shows a dialog to set up the game
     */
    private void showGameSetupDialog() {
        JDialog dialog = new JDialog(this, "Game Setup", true);
        dialog.setLayout(new GridLayout(0, 2));
        
        JSpinner humanPlayerSpinner = new JSpinner(new SpinnerNumberModel(1, 1, 4, 1));
        JSpinner botPlayerSpinner = new JSpinner(new SpinnerNumberModel(1, 0, 3, 1));
        
        dialog.add(new JLabel("Number of Human Players:"));
        dialog.add(humanPlayerSpinner);
        dialog.add(new JLabel("Number of Bot Players:"));
        dialog.add(botPlayerSpinner);
        
        JButton startButton = new JButton("Start Game");
        startButton.addActionListener(e -> {
            int humanCount = (Integer) humanPlayerSpinner.getValue();
            int botCount = (Integer) botPlayerSpinner.getValue();
            
            if (humanCount + botCount < 2 || humanCount + botCount > 4) {
                JOptionPane.showMessageDialog(dialog, "Total players must be between 2 and 4", "Invalid Setup", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // Collect player names
            List<String> humanNames = new ArrayList<>();
            List<String> botNames = new ArrayList<>();
            
            for (int i = 1; i <= humanCount; i++) {
                String name = JOptionPane.showInputDialog(dialog, "Enter name for human player " + i + ":");
                if (name == null || name.trim().isEmpty()) {
                    name = "Player " + i;
                }
                humanNames.add(name);
            }
            
            for (int i = 1; i <= botCount; i++) {
                botNames.add("Bot " + i);
            }
            
            // Start the game
            controller.startNewGame(humanNames, botNames);
            
            dialog.dispose();
        });
        
        dialog.add(startButton);
        
        dialog.pack();
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
    }
    
    /**
     * Updates the player display based on the current game state
     */
    private void updatePlayerDisplay(List<Player> players, int currentPlayerIndex) {
        playersPanel.removeAll();
        playerLabels = new JLabel[players.size()];
        
        for (int i = 0; i < players.size(); i++) {
            Player player = players.get(i);
            JPanel playerPanel = new JPanel();
            playerPanel.setLayout(new BoxLayout(playerPanel, BoxLayout.Y_AXIS));
            
            // Highlight the current player
            if (i == currentPlayerIndex) {
                playerPanel.setBorder(BorderFactory.createLineBorder(java.awt.Color.RED, 2));
            } else {
                playerPanel.setBorder(BorderFactory.createLineBorder(java.awt.Color.BLACK, 1));
            }
            
            // Player name and card count
            JLabel nameLabel = new JLabel(player.getName() + " (" + player.getHand().size() + " cards)");
            playerPanel.add(nameLabel);
            
            // If this is a human player and it's their turn, show their cards
            if (!(player instanceof Bot) && i == currentPlayerIndex) {
                JPanel cardsPanel = new JPanel(new FlowLayout());
                List<Card> hand = player.getHand();
                
                for (int j = 0; j < hand.size(); j++) {
                    final int cardIndex = j;
                    final Card card = hand.get(j);
                    
                    JButton cardButton = new JButton(card.toString());
                    cardButton.addActionListener(e -> controller.playCard(i, cardIndex));
                    cardsPanel.add(cardButton);
                }
                
                playerPanel.add(cardsPanel);
            }
            
            playerLabels[i] = nameLabel;
            playersPanel.add(playerPanel);
        }
        
        playersPanel.revalidate();
        playersPanel.repaint();
    }
    
    // GameView interface implementation
    
    @Override
    public void updateGameState(List<Player> players, int currentPlayerIndex, Card topCard, int direction, Player winner) {
        // Update current player
        currentPlayerLabel.setText("Current Player: " + players.get(currentPlayerIndex).getName());
        
        // Update top card
        topCardLabel.setText("Top Card: " + topCard.toString());
        
        // Update direction
        directionLabel.setText("Direction: " + (direction == 1 ? "Clockwise" : "Counter-clockwise"));
        
        // Update player display
        updatePlayerDisplay(players, currentPlayerIndex);
        
        // Update status label
        if (winner != null) {
            statusLabel.setText("Game Status: " + winner.getName() + " wins!");
        } else {
            statusLabel.setText("Game Status: In Progress");
        }
        
        // Refresh UI
        revalidate();
        repaint();
    }
    
    @Override
    public void showCardPlayed(Player player, Card card) {
        statusLabel.setText(player.getName() + " played " + card.toString());
    }
    
    @Override
    public void showInvalidMove(Player player, Card card) {
        statusLabel.setText("Invalid move: " + player.getName() + " cannot play " + card.toString());
        JOptionPane.showMessageDialog(this, "Invalid move!", "Error", JOptionPane.ERROR_MESSAGE);
    }
    
    @Override
    public void showPlayerSkipped(Player player) {
        statusLabel.setText(player.getName() + " was skipped");
    }
    
    @Override
    public void showDirectionChanged(boolean isReversed) {
        directionLabel.setText("Direction: " + (isReversed ? "Counter-clockwise" : "Clockwise"));
    }
    
    @Override
    public void showCardDrawn(Player player, Card card) {
        statusLabel.setText(player.getName() + " drew a card");
    }
    
    @Override
    public void showColorChanged(Color newColor) {
        statusLabel.setText("Color changed to " + newColor);
    }
    
    @Override
    public void promptColorSelection() {
        for (JButton button : colorButtons) {
            button.setVisible(true);
        }
        statusLabel.setText("Select a color");
    }
    
    @Override
    public void showGameResult(Player winner) {
        JOptionPane.showMessageDialog(this, winner.getName() + " wins the game!", "Game Over", JOptionPane.INFORMATION_MESSAGE);
        
        // Ask if they want to play again
        int option = JOptionPane.showConfirmDialog(this, "Do you want to play again?", "Game Over", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            controller.restartGame();
        } else {
            System.exit(0);
        }
    }
    
    /**
     * Main method to start the application
     */
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            GameViewImpl view = new GameViewImpl();
            view.setVisible(true);
        });
    }
}
